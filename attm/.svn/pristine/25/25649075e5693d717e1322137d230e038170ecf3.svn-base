package com.biziitech.attm.daoImp;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;

import com.biziitech.attm.bg.repository.AgentLedgerRepository;
import com.biziitech.attm.custom.model.ModelTransactionCustom;
import com.biziitech.attm.dao.DaoAgentLedger;
import com.biziitech.attm.model.ModelTran;


@Service
public class DaoAgentLedgerImp implements DaoAgentLedger  {
    
	@Autowired
	private AgentLedgerRepository agentLedgerRepository;
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private NamedParameterJdbcTemplate namedJdbcTemplate;
	
	@Override
	public List<ModelTransactionCustom> searchTranDetails(Long agentId,Date startDate,Date endDate) {
				
		//return agentLedgerRepository.findTranDetails(agentId, startDate, startDate);
		
		/*String qry="SELECT a.TRAN_ID,c.TRAN_TYPE_ID,a.TRAN_DATE,a.TRAN_AMT,a.TRAN_OWNER_ID,b.AGENT_NAME,b.AGENT_ID,c.TYPE_NAME FROM attm_tran a INNER JOIN attm_agent b ON a.TRAN_OWNER_ID=b.AGENT_ID INNER JOIN attm_tran_type c ON a.TRAN_TYPE_ID=c.TRAN_TYPE_ID "
				+ "WHERE a.TRAN_OWNER_ID=coalesce(:agentId,a.TRAN_OWNER_ID) AND"
				+ " a.TRAN_OWNER_TYPE_ID=1";
		*/
		//WHERE a.TRAN_DATE BETWEEN coalesce(:startDate,a.TRAN_DATE) AND coalesce(:endDate,a.TRAN_DATE)
		
		String qry="SELECT a.parent_tran_id,a.TRAN_ID,c.TRAN_TYPE_ID,a.TRAN_DATE,a.TRAN_AMT,a.TRAN_OWNER_ID,b.AGENT_NAME,b.AGENT_ID,c.tran_type_id,c.TYPE_NAME FROM attm_tran a INNER JOIN attm_agent b ON a.TRAN_OWNER_ID=b.AGENT_ID INNER JOIN attm_tran_type c ON a.TRAN_TYPE_ID=c.TRAN_TYPE_ID "
			//	+" WHERE  b.agent_id=coalesce(:agentId,b.agent_id) and" + 
			   + " and a.tran_date BETWEEN coalesce(:done_start_date,a.tran_date) AND coalesce(:done_end_date,a.tran_date) and a.TRAN_OWNER_TYPE_ID=1 and b.agent_id=coalesce(:agentId,b.agent_id)";
		
			
		
		RowMapper<ModelTransactionCustom> serviceMapper=new RowMapper<ModelTransactionCustom>() {
			@Override
			public ModelTransactionCustom mapRow(ResultSet rs, int rownum) throws SQLException{
				ModelTransactionCustom bn=new ModelTransactionCustom();
		        
				Long checkId=rs.getLong("parent_tran_id");				
				bn.setAgentId(rs.getLong("agent_id"));
				bn.setTransactionId(rs.getLong("tran_id"));
				bn.setTransactionAmount(rs.getDouble("tran_amt"));
				bn.setAgentName(rs.getString("agent_name"));
				bn.setTransactionDate(rs.getDate("tran_date"));
				bn.setTransactionTypeName(rs.getString("type_name"));
				//bn.setPaidAmount(rs.getDouble("amt"));
				
				System.out.println("parent tran id is " +checkId);
				
				if(checkId==null || checkId==0) {
					//bn.setMasterId(rs.getLong("tran_id"));
				}
			    
				else {
					bn.setChildId(rs.getLong("parent_tran_id"));
				}
				
				bn.setTransactionTypeId(rs.getLong("tran_type_id"));
				
			
					
			return bn;
			
			}	
		};
		

		MapSqlParameterSource parameters = new MapSqlParameterSource();
	      
	      parameters.addValue("agentId", agentId);
	      parameters.addValue("done_start_date", startDate);
	      parameters.addValue("done_end_date", endDate);
	 
	   
		return  namedJdbcTemplate.query(qry,parameters,serviceMapper);
		
	}

}
