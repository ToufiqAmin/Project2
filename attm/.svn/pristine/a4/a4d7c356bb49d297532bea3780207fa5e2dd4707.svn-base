package com.biziitech.attm.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.biziitech.attm.bg.dao.DaoCity;
import com.biziitech.attm.bg.dao.DaoCurrency;
import com.biziitech.attm.bg.dao.DaoUserObject;
import com.biziitech.attm.bg.dao.DaoUser_attm;
import com.biziitech.attm.bg.model.ModelCity;
import com.biziitech.attm.bg.model.ModelCountry;
import com.biziitech.attm.bg.model.ModelCurrency;
import com.biziitech.attm.bg.model.ModelUser;
import com.biziitech.attm.bg.model.ModelUserObject;
import com.biziitech.attm.bg.repository.AgentRepository;
import com.biziitech.attm.bg.repository.AirLineRepository;
import com.biziitech.attm.bg.repository.CountryRepository;
import com.biziitech.attm.bg.repository.TicketPurchaseChdRepository;
import com.biziitech.attm.bg.repository.TicketPurchaseMstRepository;
import com.biziitech.attm.bg.repository.UserRepository;
import com.biziitech.attm.custom.model.ModelBgUserCustom;
import com.biziitech.attm.custom.model.ModelTicketPurchaseCustom;
import com.biziitech.attm.dao.DaoLogon;
import com.biziitech.attm.dao.DaoTicketPurchaseChd;
import com.biziitech.attm.dao.DaoTicketPurchaseMst;
import com.biziitech.attm.dao.DaoTicketSellChd;
import com.biziitech.attm.dao.DaoTicketSellMst;
import com.biziitech.attm.dao.DaoTran;
import com.biziitech.attm.dao.DaoTranType;
import com.biziitech.attm.model.ModelAgent;
import com.biziitech.attm.model.ModelAirLine;
import com.biziitech.attm.model.ModelTicketPurchaseChd;
import com.biziitech.attm.model.ModelTicketPurchaseMst;
import com.biziitech.attm.model.ModelTicketRequest;
import com.biziitech.attm.model.ModelTicketSellChd;
import com.biziitech.attm.model.ModelTicketSellMst;
import com.biziitech.attm.model.ModelTran;
import com.biziitech.attm.model.ModelTranType;


@Controller
public class TicketPurchaseController {
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private DaoTicketPurchaseMst daoTicketPurchaseMst;
	
	@Autowired
	private TicketPurchaseMstRepository ticketPurchaseMstRepository;
	
	@Autowired
	private TicketPurchaseChdRepository ticketPurchaseChdRepository;
	
	@Autowired
	private DaoTicketPurchaseChd daoTicketPurchaseChd;
	
	@Autowired
	private AgentRepository agentRepository;
	
	@Autowired
	private CountryRepository countryRepository;
	
	@Autowired
	private DaoUser_attm daoUser;
	
	@Autowired
	private DaoUserObject daoUserObject;
	
	@Autowired
	private DaoLogon daoLogon;
	
	@Autowired
	private AirLineRepository airLineRepository;
	
	@Autowired
	private DaoCity daoCity;
	
	@Autowired
	private DaoTran daoTran;
	
	@Autowired
	private DaoTranType daoTranType;
	
	@Autowired
	private DaoCurrency daoCurrency;
	
	@Autowired
	private DaoTicketSellMst daoTicketSellMst;
	
	@Autowired
	private DaoTicketSellChd daoTicketSellChd;
	
	private Long systemUserId;
	
	@RequestMapping(path="/ticketpurchasecontroller/init/{userId}")
	public String init(@PathVariable Long userId,Model model) {
		
		List<ModelAirLine> airLineList= airLineRepository.getAirLineName();
		model.addAttribute("airLineList",airLineList);
		
		List<ModelAgent> agentList= agentRepository.getAgentName();
		model.addAttribute("agentList",agentList);
		
		List<ModelAgent> agentList2= agentRepository.findAgentNameBySelfFalg();
		model.addAttribute("agentList2",agentList2);
		
		List<ModelCountry> countryList = countryRepository.findCountryInOrder();
		model.addAttribute("countryList", countryList);
		
		List<ModelUser> modelUser = userRepository.getUserNameInOrder();
		model.addAttribute("userList", modelUser);
		
		  List<ModelCity> modelCity = daoCity.getCityInOrder();
		  model.addAttribute("cityList", modelCity);
		 
		String msg=" ";
		model.addAttribute("message",msg );
		
		
		this.systemUserId=userId;
		ModelUser logonUser=daoLogon.getLogonUserName(userId);
		  
		  String userName=logonUser.getUserName();
		  
		  System.out.println("logon user name is :" + userName);
		  
		  String name="User : " + userName;
		  model.addAttribute("name",name );	
		  
		  model.addAttribute("userId",userId);
		  this.systemUserId=userId;
		  
		  
		//  for setup
			
					List<ModelUserObject> listModelUserObjectSetup= new ArrayList<ModelUserObject>();
					
					listModelUserObjectSetup=daoUserObject.getUserObjectByObjectGroup(userId,"S");
					
					System.out.println("listModelUserObjectSetup : " + listModelUserObjectSetup);
					
					System.out.println("size " + listModelUserObjectSetup.size() );
					
					model.addAttribute("listModelUserObjectSetup", listModelUserObjectSetup);
					
					
					//for Transactions
					
			        List<ModelUserObject> listModelUserObjectTransaction= new ArrayList<ModelUserObject>();
					
			        listModelUserObjectTransaction=daoUserObject.getUserObjectByObjectGroup(userId,"T");
					
					System.out.println("listModelUserObjectTransaction : " + listModelUserObjectTransaction);
					
					System.out.println("size " + listModelUserObjectTransaction.size() );
					
					model.addAttribute("listModelUserObjectTransaction", listModelUserObjectTransaction);
					
			       //for Tools
					
			        List<ModelUserObject> listModelUserObjectTool= new ArrayList<ModelUserObject>();
					
			        listModelUserObjectTool=daoUserObject.getUserObjectByObjectGroup(userId,"U");
					
					System.out.println("listModelUserObjectTool : " + listModelUserObjectTool);
					
					System.out.println("listModelUserObjectTool size " + listModelUserObjectTool.size() );
					
					model.addAttribute("listModelUserObjectTool", listModelUserObjectTool);
					
					
					
			        //for reports
					
			        List<ModelUserObject> listModelUserObjectReport= new ArrayList<ModelUserObject>();
					
			        listModelUserObjectReport=daoUserObject.getUserObjectByObjectGroup(userId,"R");
					
					System.out.println("listModelUserObjectReport : " + listModelUserObjectReport);
					
					System.out.println("listModelUserObjectReport size " + listModelUserObjectReport.size());
					
					model.addAttribute("listModelUserObjectReport", listModelUserObjectReport);
					
					
					
					for(ModelUserObject a:listModelUserObjectSetup) {
						
						System.out.println("object name " + a.getModelObject().getObjectName());
					}
		 
		 return "ticketPurchase";
	}

	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/checkinguserid")
	public List<ModelBgUserCustom> checkingUserId(@RequestParam("passportNo")String passportNo){
		
		System.out.println("passportNo: " + passportNo);
		
		//List<ModelBgUser> modelUser = bgUserRepository.getUserName(passportNo);
		List<ModelBgUserCustom> modelUser = daoUser.getUserByPassportNo(passportNo);
		System.out.println("Size: "+modelUser.size());
		
		return modelUser;
	}
	
	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getuserid")
	public List<ModelBgUserCustom> getUserId(@RequestParam("userId")Long userId){
		
		System.out.println("userId: " + userId);
		
		
		//List<ModelBgUser> modelUser = bgUserRepository.getUserDetailsById(userId);
		List<ModelBgUserCustom> modelUser = daoUser.getUserNameById(userId);
		System.out.println("Size: "+modelUser.size());
		
		return modelUser;
	}
	
	@ResponseBody
	@Transactional
	@RequestMapping(path = "/ticketpurchasecontroller/saveticketpurchasemst", method = RequestMethod.POST) 
	public List<ModelTicketPurchaseCustom> saveTicketPurchaseMst(ModelTicketPurchaseMst modelTicketPurchaseMst,
			ModelAirLine modelAirLine,ModelTicketRequest modelTicketRequest,
			@RequestParam("ticketPurchaseMstId") Long ticketPurchaseMstId,
			@RequestParam("purchaseDate")@DateTimeFormat(pattern="yyyy-MM-dd")Date purchaseDate,
			@RequestParam("flightDate")@DateTimeFormat(pattern="yyyy-MM-dd")Date flightDate,
			@RequestParam("ticketRequestId") Long ticketRequestId,
			@RequestParam("airLineId") Long airLineId,
			@RequestParam("noOfTickets") Integer noOfTickets,
			@RequestParam("totalAMT") Double totalAMT,
			@RequestParam("activeStatus") int activeStatus,
			@RequestParam("remarks") String remarks,
			@RequestParam("agentPassengerName") String agentPassengerName,
			@RequestParam("userId") Long userId,
			@RequestParam("fromCountryId") Long fromCountryId,
			@RequestParam("fromCityId") Long fromCityId,
			@RequestParam("toCountryId") Long toCountryId,
			@RequestParam("toCityId") Long toCityId,
			@RequestParam("ticketAMTUSD") Double ticketAMTUSD,
			@RequestParam("ticketAMTBDT") Double ticketAMTBDT,
			@RequestParam("sellingPriceUSD") Double sellingPriceUSD,
			@RequestParam("sellingPriceBDT") Double sellingPriceBDT,
			@RequestParam("fromAgentSelfStatus") Integer fromAgentSelfStatus,
			@RequestParam("toAgentSelfStatus") Integer toAgentSelfStatus
			) {
	
		System.out.println("IN ticketpurchasecontroller saveTicketPurchaseMst Method");
		System.out.println("fromAgentSelfStatus: "+fromAgentSelfStatus+" toAgentSelfStatus: "+toAgentSelfStatus);
		
		java.util.Date date = new java.util.Date();
		java.sql.Timestamp entryTime = new java.sql.Timestamp(date.getTime());
		
		try {
			
			//if(userId==0) 
			//{
				
				//userId=null;
			//}
			
			
			if(ticketPurchaseMstId==null) 
			{
			
				modelTicketPurchaseMst.setPurchaseDate(purchaseDate);
				modelTicketPurchaseMst.setFlightDate(flightDate);
				modelAirLine.setAirLineId(airLineId);
				modelTicketPurchaseMst.setModelAirLine(modelAirLine);
				modelTicketRequest.setTicketRequestId(ticketRequestId);
				modelTicketPurchaseMst.setModelTicketRequest(modelTicketRequest);
				modelTicketPurchaseMst.setNoOfTickets(noOfTickets);
				modelTicketPurchaseMst.setTotalAmount(totalAMT);
				modelTicketPurchaseMst.setActiveStatus(activeStatus);
				modelTicketPurchaseMst.setRemarks(remarks);
				modelTicketPurchaseMst.setEnteredBy(systemUserId);
				modelTicketPurchaseMst.setEntryTimeStamp(entryTime);

			daoTicketPurchaseMst.saveTicketPurchaseMst(modelTicketPurchaseMst);
			
			/*
			 * Date: 13/5/2019
			 * KTA
			 * updated: 14/5/2019
			 */
			System.out.println("ticketPurchaseMst: "+modelTicketPurchaseMst.getTicketPurchaseMstId());
			//List<ModelTicketPurchaseCustom> modelTicketPurchaseMstCustomList = daoTicketPurchaseMst.getTicketPurchaseMstById(modelTicketPurchaseMst.getTicketPurchaseMstId());
			//Optional<ModelTicketPurchaseMst> modelTicketPurchase = ticketPurchaseMstRepository.findById(modelTicketPurchaseMst.getTicketPurchaseMstId());
			List<ModelTicketPurchaseMst> modelTicketPurchaseMstList = daoTicketPurchaseMst.getTicketPurchaseMstByMstId(modelTicketPurchaseMst.getTicketPurchaseMstId());
			System.out.println("Size: "+modelTicketPurchaseMstList.size());
			System.out.println("List: "+modelTicketPurchaseMstList);
						
			Long baseTranId = modelTicketPurchaseMstList.get(0).getTicketPurchaseMstId();
			System.out.println("baseTranId: "+baseTranId);
			Long airLingId = modelTicketPurchaseMstList.get(0).getModelAirLine().getAirLineId();
			System.out.println("airLingId: "+airLingId);
			Double tranAMT = modelTicketPurchaseMstList.get(0).getTotalAmount();
			System.out.println("tranAMT: "+tranAMT);
			//Long userId2 = modelTicketPurchaseMstCustomList.get(0).getUserId();
			//Long agentId = modelTicketPurchaseMstCustomList.get(0).getAgentId();
			Long fromAgentId;
			if(modelTicketPurchaseMstList.get(0).getModelTicketRequest().getFromAgent()==null) 
			{
				fromAgentId = 0L;
			}
			else 
			{
				fromAgentId = modelTicketPurchaseMstList.get(0).getModelTicketRequest().getFromAgent().getAgentId();
			}
			
			System.out.println("fromAgentId: "+fromAgentId);
			Long toAgentId;
			if(modelTicketPurchaseMstList.get(0).getModelTicketRequest().getToAgent()==null) 
			{
				toAgentId = 0L;
			}
			else {
				toAgentId = modelTicketPurchaseMstList.get(0).getModelTicketRequest().getToAgent().getAgentId();
			}
			//Long toAgentId = modelTicketPurchaseMstList.get(0).getModelTicketRequest().getToAgent().getAgentId();
			System.out.println("toAgentId: "+toAgentId);
			int active = modelTicketPurchaseMstList.get(0).getActiveStatus();
			System.out.println("active: "+active);
			System.out.println("baseTranId: "+baseTranId+" airLingId: "+airLingId+" tranAMT: "+tranAMT+
					" fromAgentId: "+fromAgentId+" toAgentId: "+toAgentId+" active: "+active);
			
			if(fromAgentSelfStatus==1 && toAgentSelfStatus==1) 
			{
				//List<ModelTicketSellMst> ticketSellMstList=this.saveTicketSellMst(baseTranId, noOfTickets, agentId, activeStatus);
				//Long ticketSellMstId = ticketSellMstList.get(0).getTicketSellMstId();
				this.savePurchaseChd(noOfTickets, baseTranId, agentPassengerName, userId, 
						fromCountryId, fromCityId, toCountryId, toCityId, ticketAMTUSD, 
						ticketAMTBDT, sellingPriceUSD, sellingPriceBDT,activeStatus);
				this.saveTicketSellMst(baseTranId, noOfTickets, toAgentId, activeStatus);
				
			}
			else 
			{
				this.savePurchaseChd(noOfTickets, baseTranId, agentPassengerName, userId, 
						fromCountryId, fromCityId, toCountryId, toCityId, ticketAMTUSD, 
						ticketAMTBDT, sellingPriceUSD, sellingPriceBDT,activeStatus);
				//Integer purchaseChdSize = modelTicketPurchaseChdList.size();
				
				List<ModelTicketSellMst> ticketSellMstList=this.saveTicketSellMst(baseTranId, noOfTickets, toAgentId, activeStatus);
				Long ticketSellMstId = ticketSellMstList.get(0).getTicketSellMstId();
				
				
				
				this.saveTicketSellChd(userId,sellingPriceUSD,sellingPriceBDT,activeStatus,ticketSellMstId, 
						baseTranId,agentPassengerName);
				
				this.saveTran(baseTranId,userId,toAgentId,airLingId,tranAMT,active);
			
			}
			
		
			
		/*	
			if(modelTicketPurchaseMstCustomList!=null && modelTicketPurchaseMstCustomList.size()!=0) {
				
			Long baseTranId = modelTicketPurchaseMstCustomList.get(0).getTicketPurchaseMstId();
			Long airLingId = modelTicketPurchaseMstCustomList.get(0).getAirLineId();
			Double tranAMT = modelTicketPurchaseMstCustomList.get(0).getTotalAMT();
			//Long userId2 = modelTicketPurchaseMstCustomList.get(0).getUserId();
			//Long agentId = modelTicketPurchaseMstCustomList.get(0).getAgentId();
			Long fromAgentId = modelTicketPurchaseMstCustomList.get(0).getFromAgentId();
			Long toAgentId = modelTicketPurchaseMstCustomList.get(0).getToAgentId();
			int active = modelTicketPurchaseMstCustomList.get(0).getActiveStatus();
			
			if(fromAgentSelfStatus==1 && toAgentSelfStatus==1) 
			{
				//List<ModelTicketSellMst> ticketSellMstList=this.saveTicketSellMst(baseTranId, noOfTickets, agentId, activeStatus);
				//Long ticketSellMstId = ticketSellMstList.get(0).getTicketSellMstId();
				this.savePurchaseChd(noOfTickets, baseTranId, agentPassengerName, userId, 
						fromCountryId, fromCityId, toCountryId, toCityId, ticketAMTUSD, 
						ticketAMTBDT, sellingPriceUSD, sellingPriceBDT,activeStatus);
				this.saveTicketSellMst(baseTranId, noOfTickets, toAgentId, activeStatus);
				
			}
			else 
			{
				this.savePurchaseChd(noOfTickets, baseTranId, agentPassengerName, userId, 
						fromCountryId, fromCityId, toCountryId, toCityId, ticketAMTUSD, 
						ticketAMTBDT, sellingPriceUSD, sellingPriceBDT,activeStatus);
				//Integer purchaseChdSize = modelTicketPurchaseChdList.size();
				
				List<ModelTicketSellMst> ticketSellMstList=this.saveTicketSellMst(baseTranId, noOfTickets, toAgentId, activeStatus);
				Long ticketSellMstId = ticketSellMstList.get(0).getTicketSellMstId();
				
				
				
				this.saveTicketSellChd(userId,sellingPriceUSD,sellingPriceBDT,activeStatus,ticketSellMstId, 
						baseTranId);
				
				this.saveTran(baseTranId,userId,toAgentId,airLingId,tranAMT,active);
			
			}
			
			}	
			*/
			
			
			
		}
		else {
		System.out.println("ticketPurchaseMstId Id : " + ticketPurchaseMstId);
		
		Optional<ModelTicketPurchaseMst> existsTicketPurchaseMst=ticketPurchaseMstRepository.findById(ticketPurchaseMstId);
				
		modelTicketPurchaseMst.setPurchaseDate(purchaseDate);
		modelTicketPurchaseMst.setFlightDate(flightDate);
		modelAirLine.setAirLineId(airLineId);
		modelTicketPurchaseMst.setModelAirLine(modelAirLine);
		modelTicketRequest.setTicketRequestId(ticketRequestId);
		modelTicketPurchaseMst.setModelTicketRequest(modelTicketRequest);
		modelTicketPurchaseMst.setNoOfTickets(noOfTickets);
		modelTicketPurchaseMst.setTotalAmount(totalAMT);
		modelTicketPurchaseMst.setActiveStatus(activeStatus);
		modelTicketPurchaseMst.setRemarks(remarks);
		modelTicketPurchaseMst.setUpdatedBy(systemUserId);
		modelTicketPurchaseMst.setUpdateTimeStamp(entryTime);
		modelTicketPurchaseMst.setTicketPurchaseMstId(ticketPurchaseMstId);
		modelTicketPurchaseMst.setEnteredBy(existsTicketPurchaseMst.get().getEnteredBy());
		modelTicketPurchaseMst.setEntryTimeStamp(existsTicketPurchaseMst.get().getEntryTimeStamp());
	
		daoTicketPurchaseMst.saveTicketPurchaseMst(modelTicketPurchaseMst);
		}
			
		List<ModelTicketPurchaseCustom> modelTicketPurchaseMstCustomList = daoTicketPurchaseMst.getTicketPurchaseMstById(modelTicketPurchaseMst.getTicketPurchaseMstId());
		System.out.println("Size : " + modelTicketPurchaseMstCustomList.size());
		
		
	 return modelTicketPurchaseMstCustomList;
	 
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	
}
	
	@Transactional
	public void saveTran(Long baseTranId,
			Long userId, Long toAgentId, Long airLineId, Double tranAMT,
			int activeStatus)
	{
		
		java.util.Date date = new java.util.Date();
		java.sql.Timestamp entryTime = new java.sql.Timestamp(date.getTime());
		
		System.out.println("In saveTran method");
		
		ModelTran modelTran = new ModelTran();
		modelTran.setBaseTranId(baseTranId);
		String x = "ATTM_TICKET_PURCHASE_MST";
		modelTran.setBaseTranTable(x);
		ModelUser modelUser = new ModelUser();
		modelUser.setUserId(userId);
		modelTran.setModelUser(modelUser);
		ModelAgent modelAgent = new ModelAgent();
		if(toAgentId==0) 
		{
			modelTran.setModelAgent(null);
		}
		else 
		{
			modelAgent.setAgentId(toAgentId);
			modelTran.setModelAgent(modelAgent);
		}
//		modelAgent.setAgentId(toAgentId);
//		modelTran.setModelAgent(modelAgent);
		ModelAirLine modelAirLine = new ModelAirLine();
		modelAirLine.setAirLineId(airLineId);
		modelTran.setModelAirLine(modelAirLine);
		modelTran.setTranAMT(tranAMT);
		modelTran.setActiveStatus(activeStatus);
		modelTran.setTranDate(entryTime);
		
		ModelTranType modelTrantype = new ModelTranType();
		
		String typeName="Ticket Purchase";
		
		List<ModelTranType> modelTranTypeList = daoTranType.getTranTypeByName(typeName);
		
		Long tranTypeId = modelTranTypeList.get(0).getTranTypeId();
		
		modelTrantype.setTranTypeId(tranTypeId);
		modelTran.setModelTranType(modelTrantype);
		
		String currencyName= "Taka";
		
		List<ModelCurrency> modelCurrencyList = daoCurrency.getCurrencyByName(currencyName);
		Long currencyId = modelCurrencyList.get(0).getCurrencyId();
		
		ModelCurrency modelCurrency = new ModelCurrency(); 
		modelCurrency.setCurrencyId(currencyId);
		modelTran.setModelCurrency(modelCurrency);
		
		daoTran.saveTran(modelTran);
		
	}
	
	@Transactional
	public void savePurchaseChd(Integer noOfTickets,Long ticketPurchaseMstId,String agentPassengerName,Long userId,
			Long fromCountryId, Long fromCityId, Long toCountryId, Long toCityId, 
			Double ticketAMTUSD, Double ticketAMTBDT,Double sellingPriceUSD, Double sellingPriceBDT, 
			int activeStatus) 
	{
		java.util.Date date = new java.util.Date();
		java.sql.Timestamp entryTime = new java.sql.Timestamp(date.getTime());
		
		System.out.println("In savePurchaseChd method");
		
		for(int i=0;i<noOfTickets;i++) 
		{
			ModelTicketPurchaseChd modelTicketPurchaseChd = new ModelTicketPurchaseChd();
			
			ModelTicketPurchaseMst modelTicketPurchaseMst = new ModelTicketPurchaseMst();
			modelTicketPurchaseMst.setTicketPurchaseMstId(ticketPurchaseMstId);
			modelTicketPurchaseChd.setModelTicketPurchaseMst(modelTicketPurchaseMst);
			modelTicketPurchaseChd.setAgentPassengerName(agentPassengerName);
			
			ModelUser modelUser = new ModelUser();
			if(userId==0) 
			{
				modelTicketPurchaseChd.setModelUser(null);
			}
			else 
			{
				modelUser.setUserId(userId);
				modelTicketPurchaseChd.setModelUser(modelUser);
			}
			
//			modelUser.setUserId(userId);
//			modelTicketPurchaseChd.setModelUser(modelUser);
			
			ModelCity modelCity = new ModelCity();
			modelCity.setCityId(fromCityId);
			modelTicketPurchaseChd.setCityFrom(modelCity);
			
			ModelCountry modelCountry = new ModelCountry();
			modelCountry.setCountryId(fromCountryId);
			modelTicketPurchaseChd.setCountryFrom(modelCountry);
			
			ModelCountry modelCountry2 = new ModelCountry();
			modelCountry2.setCountryId(toCountryId);
			modelTicketPurchaseChd.setCountryTo(modelCountry2);
			
			ModelCity modelCity2 = new ModelCity();
			modelCity2.setCityId(toCityId);
			modelTicketPurchaseChd.setCityTo(modelCity2);
			
			modelTicketPurchaseChd.setTicketAMTUSD(ticketAMTUSD);
			modelTicketPurchaseChd.setTicketAMTBDT(ticketAMTBDT);
			modelTicketPurchaseChd.setSellingPriceUSD(sellingPriceUSD);
			modelTicketPurchaseChd.setSellingPriceBDT(sellingPriceBDT);
			
			modelTicketPurchaseChd.setActiveStatus(activeStatus);
			modelTicketPurchaseChd.setEntryTimeStamp(entryTime);
			modelTicketPurchaseChd.setEnteredBy(systemUserId);
			modelTicketPurchaseChd.setAgentPassengerName(agentPassengerName);
			modelTicketPurchaseChd.setPurchasePriceUSD(ticketAMTUSD);
			modelTicketPurchaseChd.setPurchasePriceBDT(ticketAMTBDT);
			
			daoTicketPurchaseChd.saveTicketPurchaseChd(modelTicketPurchaseChd);
			
			
		}
		
		
	}
	
	
	@Transactional
	public void saveTicketSellChd(Long userId, Double sellingPriceUSD, Double sellingPriceBDT, 
			int activeStatus, Long ticketSellMstId, Long ticketPurchaseMstId, String agentPassengerName) 
	{
		
		/*
		 * below code for saving sellChd
		 * 
		 */
		System.out.println("In saveTicketSellChd method");
		
		java.util.Date date = new java.util.Date();
		java.sql.Timestamp entryTime = new java.sql.Timestamp(date.getTime());
		
		List <ModelTicketPurchaseChd> modelTicketPurchaseChdList =daoTicketPurchaseChd.getTicketPurchaseChdByMstId(ticketPurchaseMstId);
		Integer size = modelTicketPurchaseChdList.size();
		for(Integer i=0; i<size; i++) 
		{
			Long ticketPurchaseChdId= modelTicketPurchaseChdList.get(i).getTicketPurchaseChdId();
			
			ModelTicketPurchaseChd modelTicketPurchaseChdId2 = new ModelTicketPurchaseChd();
			modelTicketPurchaseChdId2.setTicketPurchaseChdId(ticketPurchaseChdId);
			
			ModelTicketSellChd modelTicketSellChd = new ModelTicketSellChd();
			modelTicketSellChd.setModelTicketPurChaseChd(modelTicketPurchaseChdId2);
			
			ModelTicketSellMst modelTicketSellMst = new ModelTicketSellMst();
			modelTicketSellMst.setTicketSellMstId(ticketSellMstId);
			modelTicketSellChd.setModelTicketSellMst(modelTicketSellMst);
			ModelUser modelUser = new ModelUser();
			if(userId==0) 
			{
				modelTicketSellChd.setModelUser(null);
			}
			else {
				modelUser.setUserId(userId);
				modelTicketSellChd.setModelUser(modelUser);
			}
			//modelTicketSellChd.setModelUser(modelUser);
			modelTicketSellChd.setTicketAMTUSD(sellingPriceUSD);
			modelTicketSellChd.setTicketAMTBDT(sellingPriceBDT);
			modelTicketSellChd.setActiveStatus(activeStatus);
			modelTicketSellChd.setEnteredBy(systemUserId);
			modelTicketSellChd.setEntryTimeStamp(entryTime);
			modelTicketSellChd.setAgentPassengerName(agentPassengerName);
			
			daoTicketSellChd.saveTicketSellChd(modelTicketSellChd);
			
		}
		
		//Long ticketPurchaseChdId = modelTicketPurchaseChd.getTicketPurchaseChdId();
		
		
	}
	
	
	@Transactional
	public List<ModelTicketSellMst> saveTicketSellMst(Long ticketPurchaseMstId, Integer sellQty, Long toAgentId, 
			int activeStatus) 
	{
		System.out.println("In saveTicketSellMst method");
		
		java.util.Date date = new java.util.Date();
		java.sql.Timestamp entryTime = new java.sql.Timestamp(date.getTime());
		
		ModelTicketSellMst modelTicketSellMst = new ModelTicketSellMst();
		
		ModelTicketPurchaseMst modelTicketPurchaseMst = new ModelTicketPurchaseMst();
		modelTicketPurchaseMst.setTicketPurchaseMstId(ticketPurchaseMstId);
		modelTicketSellMst.setModelTicketPurchaseMst(modelTicketPurchaseMst);
		modelTicketSellMst.setSellQty(sellQty);
		modelTicketSellMst.setSellDate(entryTime);
		
		ModelAgent modelAgent = new ModelAgent();
		if(toAgentId==0) 
		{
			modelTicketSellMst.setModelAgent(null);
		}
		else {
			modelAgent.setAgentId(toAgentId);
			modelTicketSellMst.setModelAgent(modelAgent);
		}
		
		modelTicketSellMst.setEnteredBy(systemUserId);
		modelTicketSellMst.setEntryTimeStamp(entryTime);
		modelTicketSellMst.setActiveStatus(activeStatus);
		
		daoTicketSellMst.saveTicketSellMst(modelTicketSellMst);
		
		return daoTicketSellMst.getTicketSellMstById(modelTicketSellMst.getTicketSellMstId());
		
	}
	
	
	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getticketpurchasemstundone", method = RequestMethod.GET)
	public List<ModelTicketPurchaseCustom> getTicketPurchaseMstUnDone(
			//@RequestParam("agentId")Long agentId,
			@RequestParam("fromAgentId")Long fromAgentId,
			@RequestParam("toAgentId")Long toAgentId,
			@RequestParam("passportNo")String passportNo,
			@RequestParam("userId")Long userId,
			@RequestParam("fromCountryId")Long fromCountryId,
			@RequestParam("fromCityId")Long fromCityId,
			@RequestParam("toCountryId")Long toCountryId,
			@RequestParam("toCityId")Long toCityId){
		
		System.out.println("userId: " + userId+" fromAgentId "+fromAgentId+" toAgentId: "+toAgentId+" passportNo "+passportNo+" fromCountryId "+fromCountryId+" fromCityId "+fromCityId+" toCountryId "+toCountryId+" toCityId "+toCityId);
		
		try {
		
		List<ModelTicketPurchaseCustom> modelTicketPurchaseCustomList = daoTicketPurchaseMst.getTicketPurchaseMstUnDone(fromAgentId,toAgentId,passportNo,userId,fromCountryId,fromCityId,toCountryId,toCityId);
		System.out.println("Size: "+modelTicketPurchaseCustomList.size());
		
		return modelTicketPurchaseCustomList;
		
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	}
	
	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getticketpurchasemstdone", method = RequestMethod.GET)
	public List<ModelTicketPurchaseCustom> getTicketPurchaseMstDone(
			//@RequestParam("agentId")Long agentId,
			@RequestParam("fromAgentId")Long fromAgentId,
			@RequestParam("toAgentId")Long toAgentId,
			@RequestParam("passportNo")String passportNo,
			@RequestParam("fromDate")@DateTimeFormat(pattern="yyyy-MM-dd")Date fromDate,
			@RequestParam("toDate")@DateTimeFormat(pattern="yyyy-MM-dd")Date toDate,
			@RequestParam("userId")Long userId,
			@RequestParam("fromCountryId")Long fromCountryId,
			@RequestParam("fromCityId")Long fromCityId,
			@RequestParam("toCountryId")Long toCountryId,
			@RequestParam("toCityId")Long toCityId){
		
		System.out.println("userId: " + userId);
		
		try {
		
		List<ModelTicketPurchaseCustom> modelTicketPurchaseCustomList = daoTicketPurchaseMst.getTicketPurchaseMstDone(fromAgentId,toAgentId,passportNo,userId,fromCountryId,fromCityId,toCountryId,toCityId,fromDate,toDate);
		System.out.println("Size: "+modelTicketPurchaseCustomList.size());
		
		return modelTicketPurchaseCustomList;
		
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	}
	
	@ResponseBody
	@RequestMapping(path = "/ticketpurchasecontroller/saveticketpurchasechd", method = RequestMethod.POST) 
	public List<ModelTicketPurchaseChd> saveTicketPurchaseChd(ModelTicketPurchaseMst modelTicketPurchaseMst,
			ModelAirLine modelAirLine,ModelTicketPurchaseChd modelTicketPurchaseChd,ModelUser modelUser,
			
			@RequestParam("ticketPurchaseMstId") Long ticketPurchaseMstId,
			@RequestParam("ticketPurchaseChdId") Long ticketPurchaseChdId,
			@RequestParam("ticketNo")String ticketNo,
			@RequestParam("agentPassengerName")String agentPassengerName,
			@RequestParam("userId") Long userId,
			@RequestParam("pNR") String pNR,
			@RequestParam("fromCountryId") Long fromCountryId,
			@RequestParam("fromCityId") Long fromCityId,
			@RequestParam("toCountryId") Long toCountryId,
			@RequestParam("toCityId") Long toCityId,
			@RequestParam("ticketAMTUSD") Double ticketAMTUSD,
			@RequestParam("ticketAMTBDT") Double ticketAMTBDT,
			@RequestParam("sellingPriceUSD") Double sellingPriceUSD,
			@RequestParam("sellingPriceBDT") Double sellingPriceBDT,
			@RequestParam("activeStatus") int activeStatus,
			@RequestParam("remarks") String remarks
			) {
	
		System.out.println("IN ticketpurchasecontroller saveTicketPurchaseChd Method fromCity: "+fromCityId+" toCity: "+toCityId);
		
		java.util.Date date = new java.util.Date();
		java.sql.Timestamp entryTime = new java.sql.Timestamp(date.getTime());
		
		try {
			
			if(ticketPurchaseChdId==null) 
			{
			
				modelTicketPurchaseMst.setTicketPurchaseMstId(ticketPurchaseMstId);
				modelTicketPurchaseChd.setModelTicketPurchaseMst(modelTicketPurchaseMst);
				ModelCountry modelCountry = new ModelCountry();
				modelCountry.setCountryId(fromCountryId);
				modelTicketPurchaseChd.setCountryFrom(modelCountry);
				ModelCountry modelCountry2 = new ModelCountry();
				modelCountry2.setCountryId(toCountryId);
				modelTicketPurchaseChd.setCountryTo(modelCountry2);
				ModelCity modelCity = new ModelCity();
				modelCity.setCityId(fromCityId);
				modelTicketPurchaseChd.setCityFrom(modelCity);
				ModelCity modelCity2 = new ModelCity();
				modelCity2.setCityId(toCityId);
				modelTicketPurchaseChd.setCityTo(modelCity2);
				//modelTicketPurchaseChd.setCityFrom(fromCityId);
				//modelTicketPurchaseChd.setCityTo(toCityId);
				modelUser.setUserId(userId);
				modelTicketPurchaseChd.setModelUser(modelUser);
				modelTicketPurchaseChd.setpNR(pNR);
				modelTicketPurchaseChd.setTicketNo(ticketNo);
				System.out.println("Agent Passenger Name: "+agentPassengerName);
				modelTicketPurchaseChd.setAgentPassengerName(agentPassengerName);
				modelTicketPurchaseChd.setTicketAMTUSD(ticketAMTUSD);
				modelTicketPurchaseChd.setTicketAMTBDT(ticketAMTBDT);
				modelTicketPurchaseChd.setSellingPriceUSD(sellingPriceUSD);
				modelTicketPurchaseChd.setSellingPriceBDT(sellingPriceBDT);
				modelTicketPurchaseChd.setActiveStatus(activeStatus);
				modelTicketPurchaseChd.setRemarks(remarks);
				modelTicketPurchaseChd.setEnteredBy(systemUserId);
				modelTicketPurchaseChd.setEntryTimeStamp(entryTime);

				daoTicketPurchaseChd.saveTicketPurchaseChd(modelTicketPurchaseChd);
		}
		else {
		System.out.println("ticketPurchaseChdId Id : " + ticketPurchaseChdId);
		
		Optional<ModelTicketPurchaseChd> existsTicketPurchaseChd=ticketPurchaseChdRepository.findById(ticketPurchaseChdId);
				
		modelTicketPurchaseMst.setTicketPurchaseMstId(ticketPurchaseMstId);
		modelTicketPurchaseChd.setModelTicketPurchaseMst(modelTicketPurchaseMst);
		ModelCountry modelCountry = new ModelCountry();
		modelCountry.setCountryId(fromCountryId);
		modelTicketPurchaseChd.setCountryFrom(modelCountry);
		ModelCountry modelCountry2 = new ModelCountry();
		modelCountry2.setCountryId(toCountryId);
		modelTicketPurchaseChd.setCountryTo(modelCountry2);
		ModelCity modelCity = new ModelCity();
		modelCity.setCityId(fromCityId);
		modelTicketPurchaseChd.setCityFrom(modelCity);
		ModelCity modelCity2 = new ModelCity();
		modelCity2.setCityId(toCityId);
		modelTicketPurchaseChd.setCityTo(modelCity2);
		//modelTicketPurchaseChd.setCityFrom(fromCityId);
		//modelTicketPurchaseChd.setCityTo(toCityId);
		modelUser.setUserId(userId);
		modelTicketPurchaseChd.setModelUser(modelUser);
		modelTicketPurchaseChd.setpNR(pNR);
		modelTicketPurchaseChd.setTicketNo(ticketNo);
		modelTicketPurchaseChd.setAgentPassengerName(agentPassengerName);
		modelTicketPurchaseChd.setTicketAMTUSD(ticketAMTUSD);
		modelTicketPurchaseChd.setTicketAMTBDT(ticketAMTBDT);
		modelTicketPurchaseChd.setSellingPriceUSD(sellingPriceUSD);
		modelTicketPurchaseChd.setSellingPriceBDT(sellingPriceBDT);
		modelTicketPurchaseChd.setActiveStatus(activeStatus);
		modelTicketPurchaseChd.setRemarks(remarks);
		modelTicketPurchaseChd.setUpdatedBy(systemUserId);
		modelTicketPurchaseChd.setUpdateTimeStamp(entryTime);
		modelTicketPurchaseChd.setEnteredBy(existsTicketPurchaseChd.get().getEnteredBy());
		modelTicketPurchaseChd.setEntryTimeStamp(existsTicketPurchaseChd.get().getEntryTimeStamp());
		modelTicketPurchaseMst.setTicketPurchaseMstId(ticketPurchaseMstId);
		modelTicketPurchaseChd.setModelTicketPurchaseMst(modelTicketPurchaseMst);
	
		daoTicketPurchaseChd.saveTicketPurchaseChd(modelTicketPurchaseChd);
		
		// ticketSellChdEdit
		
		List<ModelTicketSellChd> modelTicketSellChdList = daoTicketSellChd.getTicketSellChdByTicketPurchaseChdId(modelTicketPurchaseChd.getTicketPurchaseChdId());
			
		Long ticketSellChdId = modelTicketSellChdList.get(0).getTicketSellChdId();
		Long ticketSellMstId = modelTicketSellChdList.get(0).getModelTicketSellMst().getTicketSellMstId();
		
		ModelTicketPurchaseChd modelTicketPurchaseChdId2 = new ModelTicketPurchaseChd();
		modelTicketPurchaseChdId2.setTicketPurchaseChdId(ticketPurchaseChdId);
		
		ModelTicketSellChd modelTicketSellChd = new ModelTicketSellChd();
		modelTicketSellChd.setModelTicketPurChaseChd(modelTicketPurchaseChdId2);
		
		ModelTicketSellMst modelTicketSellMst = new ModelTicketSellMst();
		modelTicketSellMst.setTicketSellMstId(ticketSellMstId);
		modelTicketSellChd.setModelTicketSellMst(modelTicketSellMst);
		modelTicketSellChd.setModelUser(modelUser);
		modelTicketSellChd.setTicketAMTUSD(sellingPriceUSD);
		modelTicketSellChd.setTicketAMTBDT(sellingPriceBDT);
		modelTicketSellChd.setActiveStatus(activeStatus);
		modelTicketSellChd.setEnteredBy(modelTicketSellChdList.get(0).getEnteredBy());
		modelTicketSellChd.setEntryTimeStamp(modelTicketSellChdList.get(0).getEntryTimeStamp());
		modelTicketSellChd.setUpdatedBy(systemUserId);
		modelTicketSellChd.setUpdateTimeStamp(entryTime);
		modelTicketSellChd.setpNR(pNR);
		modelTicketSellChd.setAgentPassengerName(agentPassengerName);
		modelTicketSellChd.setTicketSellChdId(ticketSellChdId);
		
		daoTicketSellChd.saveTicketSellChd(modelTicketSellChd);
		
		
		}
			
		List<ModelTicketPurchaseChd> modelTicketPurchaseChdList = daoTicketPurchaseChd.getTicketPurchaseChdByMstId(modelTicketPurchaseChd.getModelTicketPurchaseMst().getTicketPurchaseMstId());
		System.out.println("Size : " + modelTicketPurchaseChdList.size());

	 return modelTicketPurchaseChdList;
	 
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	
}
	
	
	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getticketpurchasechdbymstid", method = RequestMethod.GET)
	public List<ModelTicketPurchaseChd> getTicketPurchaseChdByMstId(
			@RequestParam("ticketPurchaseMstId")Long ticketPurchaseMstId
			){
		
		System.out.println("ticketPurchaseMstId: " + ticketPurchaseMstId);
		
		try {
		System.out.println("IN getTicketPurchaseChdByMstId Method");
		List<ModelTicketPurchaseChd> modelTicketPurchaseChdList = daoTicketPurchaseChd.getTicketPurchaseChdByMstId(ticketPurchaseMstId);
		System.out.println("Size: "+modelTicketPurchaseChdList.size());
		
		return modelTicketPurchaseChdList;
		
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	}
	
	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getticketpurchasemstbyid", method = RequestMethod.GET)
	public List<ModelTicketPurchaseCustom> getTicketPurchaseMstById(
			@RequestParam("ticketPurchaseMstId")Long ticketPurchaseMstId){
		
		System.out.println("ticketPurchaseMstId: " + ticketPurchaseMstId);
		
		try {
		
			List<ModelTicketPurchaseCustom> modelTicketPurchaseCustomList = daoTicketPurchaseMst.getTicketPurchaseMstById(ticketPurchaseMstId);
			System.out.println("Size : " + modelTicketPurchaseCustomList.size());
		
		return modelTicketPurchaseCustomList;
		
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	}
	
	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getcitybycountryid")	
	public List<ModelCity> getCityByCountryId(@RequestParam("countryId") Long countryId){
		
		
		
		List<ModelCity> modelCity = daoCity.getCityByCountryId(countryId);
		System.out.println("Size: "+modelCity.size());
		
		return modelCity;
	}
	
	

	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getpurchasemst")	
	public List<ModelTicketPurchaseCustom> getPurchaseMst(@RequestParam("ticketPurchaseMstId")Long ticketPurchaseMstId){
		
		System.out.println("ticketPurchaseMstId: " + ticketPurchaseMstId);
		
		try {
		
			List<ModelTicketPurchaseCustom> modelTicketPurchaseCustomList = daoTicketPurchaseMst.getTicketPurchaseMstById(ticketPurchaseMstId);
			System.out.println("Size : " + modelTicketPurchaseCustomList.size());
		
		return modelTicketPurchaseCustomList;
		
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	}
	

	@ResponseBody
	@RequestMapping(path="/ticketpurchasecontroller/getpurchasechd")	
	public List<ModelTicketPurchaseChd> getPurchaseChd(@RequestParam("ticketPurchaseMstId")Long ticketPurchaseMstId){
		
System.out.println("ticketPurchaseMstId: " + ticketPurchaseMstId);
		
		try {
		
		List<ModelTicketPurchaseChd> modelTicketPurchaseChdList = daoTicketPurchaseChd.getTicketPurchaseChdByMstId(ticketPurchaseMstId);
		System.out.println("Size : " + modelTicketPurchaseChdList.size());

	 return modelTicketPurchaseChdList;
	 
		}		
		catch(Exception e) {			
		 e.printStackTrace();
		 System.out.println("error");
			return null;
		}
	}
	
	
}
